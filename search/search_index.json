{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#stripe-sync-engine","title":"Stripe Sync Engine","text":"<p>Sometimes you want to analyze your billing data using SQL. Even more importantly, you want to join your billing data to your product/business data.</p> <p>This project synchronizes your Stripe account to a Postgres database. It can be a new database, or an existing Postgres database.</p>"},{"location":"#how-it-works","title":"How it works","text":"<ul> <li>Creates a new schema <code>stripe</code> in a Postgres database, with tables &amp; columns matching Stripe.</li> <li>Exposes a <code>/webhooks</code> endpoint that listens to any Stripe webhooks (via the Fastify app).</li> <li>Inserts/updates/deletes changes into the tables whenever there is a change to Stripe.</li> </ul>"},{"location":"#webhook-support","title":"Webhook Support","text":"<ul> <li> <code>balance.available</code></li> <li> <code>charge.captured</code> \ud83d\udfe2</li> <li> <code>charge.expired</code> \ud83d\udfe2</li> <li> <code>charge.failed</code> \ud83d\udfe2</li> <li> <code>charge.pending</code> \ud83d\udfe2</li> <li> <code>charge.refunded</code> \ud83d\udfe2</li> <li> <code>charge.refund.updated</code> \ud83d\udfe1 - For updates on all refunds, listen to <code>refund.updated</code> instead</li> <li> <code>charge.succeeded</code> \ud83d\udfe2</li> <li> <code>charge.updated</code> \ud83d\udfe2</li> <li> <code>charge.dispute.closed</code> \ud83d\udfe2</li> <li> <code>charge.dispute.created</code> \ud83d\udfe2</li> <li> <code>charge.dispute.funds_reinstated</code> \ud83d\udfe2</li> <li> <code>charge.dispute.funds_withdrawn</code> \ud83d\udfe2</li> <li> <code>charge.dispute.updated</code> \ud83d\udfe2</li> <li> <code>checkout.session.async_payment_failed</code></li> <li> <code>checkout.session.async_payment_succeeded</code></li> <li> <code>checkout.session.completed</code></li> <li> <code>credit_note.created</code> \ud83d\udfe2</li> <li> <code>credit_note.updated</code> \ud83d\udfe2</li> <li> <code>credit_note.voided</code> \ud83d\udfe2</li> <li> <code>customer.created</code> \ud83d\udfe2</li> <li> <code>customer.deleted</code> \ud83d\udfe2</li> <li> <code>customer.source.created</code></li> <li> <code>customer.source.updated</code></li> <li> <code>customer.subscription.created</code> \ud83d\udfe2</li> <li> <code>customer.subscription.deleted</code> \ud83d\udfe2</li> <li> <code>customer.subscription.paused</code> \ud83d\udfe2</li> <li> <code>customer.subscription.pending_update_applied</code> \ud83d\udfe2</li> <li> <code>customer.subscription.pending_update_expired</code> \ud83d\udfe2</li> <li> <code>customer.subscription.resumed</code> \ud83d\udfe2</li> <li> <code>customer.subscription.trial_will_end</code> \ud83d\udfe2</li> <li> <code>customer.subscription.updated</code> \ud83d\udfe2</li> <li> <code>customer.tax_id.created</code> \ud83d\udfe2</li> <li> <code>customer.tax_id.deleted</code> \ud83d\udfe2</li> <li> <code>customer.tax_id.updated</code> \ud83d\udfe2</li> <li> <code>customer.updated</code> \ud83d\udfe2</li> <li> <code>invoice.created</code> \ud83d\udfe2</li> <li> <code>invoice.deleted</code> \ud83d\udfe2</li> <li> <code>invoice.finalized</code> \ud83d\udfe2</li> <li> <code>invoice.finalization_failed</code> \ud83d\udfe2</li> <li> <code>invoice.marked_uncollectible</code> \ud83d\udfe2</li> <li> <code>invoice.paid</code> \ud83d\udfe2</li> <li> <code>invoice.payment_action_required</code> \ud83d\udfe2</li> <li> <code>invoice.payment_failed</code> \ud83d\udfe2</li> <li> <code>invoice.payment_succeeded</code> \ud83d\udfe2</li> <li> <code>invoice.sent</code> \ud83d\udfe2</li> <li> <code>invoice.upcoming</code> \ud83d\udd34 - Event has no id and cannot be processed</li> <li> <code>invoice.updated</code> \ud83d\udfe2</li> <li> <code>invoice.overdue</code> \ud83d\udfe2</li> <li> <code>invoice.overpaid</code> \ud83d\udfe2</li> <li> <code>invoice.will_be_due</code> \ud83d\udfe2</li> <li> <code>invoice.voided</code> \ud83d\udfe2</li> <li> <code>issuing_authorization.request</code></li> <li> <code>issuing_card.created</code></li> <li> <code>issuing_cardholder.created</code></li> <li> <code>payment_intent.amount_capturable_updated</code> \ud83d\udfe2</li> <li> <code>payment_intent.canceled</code> \ud83d\udfe2</li> <li> <code>payment_intent.created</code> \ud83d\udfe2</li> <li> <code>payment_intent.partially_refunded</code> \ud83d\udfe2</li> <li> <code>payment_intent.payment_failed</code> \ud83d\udfe2</li> <li> <code>payment_intent.processing</code> \ud83d\udfe2</li> <li> <code>payment_intent.requires_action</code> \ud83d\udfe2</li> <li> <code>payment_intent.succeeded</code> \ud83d\udfe2</li> <li> <code>payment_method.attached</code> \ud83d\udfe2</li> <li> <code>payment_method.automatically_updated</code> \ud83d\udfe2</li> <li> <code>payment_method.detached</code> \ud83d\udfe2</li> <li> <code>payment_method.updated</code> \ud83d\udfe2</li> <li> <code>plan.created</code> \ud83d\udfe2</li> <li> <code>plan.deleted</code> \ud83d\udfe2</li> <li> <code>plan.updated</code> \ud83d\udfe2</li> <li> <code>price.created</code> \ud83d\udfe2</li> <li> <code>price.deleted</code> \ud83d\udfe2</li> <li> <code>price.updated</code> \ud83d\udfe2</li> <li> <code>product.created</code> \ud83d\udfe2</li> <li> <code>product.deleted</code> \ud83d\udfe2</li> <li> <code>product.updated</code> \ud83d\udfe2</li> <li> <code>radar.early_fraud_warning.created</code> \ud83d\udfe2</li> <li> <code>radar.early_fraud_warning.updated</code> \ud83d\udfe2</li> <li> <code>refund.created</code> \ud83d\udfe2</li> <li> <code>refund.failed</code> \ud83d\udfe2</li> <li> <code>refund.updated</code> \ud83d\udfe2</li> <li> <code>review.opened</code> \ud83d\udfe2</li> <li> <code>review.closed</code> \ud83d\udfe2</li> <li> <code>setup_intent.canceled</code> \ud83d\udfe2</li> <li> <code>setup_intent.created</code> \ud83d\udfe2</li> <li> <code>setup_intent.requires_action</code> \ud83d\udfe2</li> <li> <code>setup_intent.setup_failed</code> \ud83d\udfe2</li> <li> <code>setup_intent.succeeded</code> \ud83d\udfe2</li> <li> <code>subscription_schedule.aborted</code> \ud83d\udfe2</li> <li> <code>subscription_schedule.canceled</code> \ud83d\udfe2</li> <li> <code>subscription_schedule.completed</code> \ud83d\udfe2</li> <li> <code>subscription_schedule.created</code> \ud83d\udfe2</li> <li> <code>subscription_schedule.expiring</code> \ud83d\udfe2</li> <li> <code>subscription_schedule.released</code> \ud83d\udfe2</li> <li> <code>subscription_schedule.updated</code> \ud83d\udfe2</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome.</p>"},{"location":"contributing/#contributing-to-the-docs","title":"Contributing to the Docs","text":"<p>Building documentation requires Python 3.8+ and uv.</p>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Create a virtual environment and install mkdocs, themes, and extensions using uv.</p> <pre><code>source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -r docs/requirements_docs.txt\n</code></pre>"},{"location":"contributing/#serving","title":"Serving","text":"<p>To serve the documentation locally, make sure your virtual environment is activated and run:</p> <pre><code>source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nmkdocs serve\n</code></pre> <p>and visit the docs at http://127.0.0.1:8000/</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>If you have write access to the repo, docs can be updated using</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"docker/","title":"With Docker","text":"<p>A Fastify-based server for syncing your Stripe account to a Postgres database in real time. Built on top of the Stripe Sync Engine.</p>"},{"location":"docker/#features","title":"Features","text":"<ul> <li>Exposes a <code>/webhooks</code> endpoint to receive Stripe webhooks and sync data to Postgres</li> <li>Supports syncing customers, invoices, products, subscriptions, and more</li> <li>Runs as a lightweight Docker container</li> <li>Designed for easy deployment to any cloud or self-hosted environment</li> </ul>"},{"location":"docker/#quick-start","title":"Quick Start","text":""},{"location":"docker/#1-pull-the-image","title":"1. Pull the image","text":"<pre><code>docker pull supabase/stripe-sync-engine:latest\n</code></pre>"},{"location":"docker/#2-run-the-container","title":"2. Run the container","text":"<pre><code>docker run -d \\\n  -e DATABASE_URL=postgres://postgres:postgres@localhost:5432/postgres \\\n  -e STRIPE_SECRET_KEY=sk_test_... \\\n  -e STRIPE_WEBHOOK_SECRET=... \\\n  -e API_KEY=\"my-secret\" \\\n  -p 8080:8080 \\\n  supabase/stripe-sync-engine:latest\n</code></pre>"},{"location":"docker/#3-configuration","title":"3. Configuration","text":"<p>Set your webhook endpoint in the Stripe dashboard to point to your server\u2019s <code>/webhooks</code> route (e.g., <code>https://yourdomain.com/webhooks</code>).</p>"},{"location":"docker/#environment-variables","title":"Environment Variables","text":"Variable Description Required <code>DATABASE_URL</code> Postgres connection string (with <code>search_path=stripe</code>) Yes <code>STRIPE_WEBHOOK_SECRET</code> Stripe webhook signing secret Yes <code>API_KEY</code> API key for admin endpoints (backfilling, etc.) Yes <code>SCHEMA</code> Database schema name (default: <code>stripe</code>) No <code>STRIPE_SECRET_KEY</code> Stripe secret key (needed for active sync/backfill) No <code>PORT</code> Port to run the server on (default: 8080) No <code>STRIPE_API_VERSION</code> Stripe API version (default: <code>2020-08-27</code>) No <code>AUTO_EXPAND_LISTS</code> Fetch all list items from Stripe (default: false) No <code>BACKFILL_RELATED_ENTITIES</code> Backfill related entities for foreign key integrity (default: true) No <code>MAX_POSTGRES_CONNECTIONS</code> Max Postgres connection pool size (default: 10) No <code>REVALIDATE_ENTITY_VIA_STRIPE_API</code> Always fetch latest entity from Stripe (default: false) No"},{"location":"docker/#endpoints","title":"Endpoints","text":"<ul> <li><code>POST /webhooks</code> \u2014 Receives Stripe webhook events and syncs data to Postgres</li> <li><code>GET /health</code> \u2014 Health check endpoint</li> <li><code>POST /sync</code> \u2014 Backfill Stripe data to Postgres (API key required)</li> <li><code>POST /sync/single/:stripeId</code> \u2014 Backfill or update a single Stripe entity by ID (API key required)</li> <li><code>POST /daily</code> \u2014 Backfill data from the last 24 hours (API key required)</li> <li><code>POST /weekly</code> \u2014 Backfill data from the last 7 days (API key required)</li> <li><code>POST /monthly</code> \u2014 Backfill data from the last 30 days (API key required)</li> </ul>"},{"location":"docker/#example-docker-compose","title":"Example Docker Compose","text":"<pre><code>version: '3'\nservices:\n  postgres:\n    image: postgres:17\n    restart: always\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n    ports:\n      - 5432:5432\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n\n  stripe-sync:\n    image: supabase/stripe-sync-fastify:latest\n    depends_on:\n      - postgres\n    ports:\n      - 8080:8080\n    environment:\n      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable&amp;search_path=stripe\n      STRIPE_SECRET_KEY: sk_test_...\n      STRIPE_WEBHOOK_SECRET: whsec_...\n      API_KEY: my-secret\n\nvolumes:\n  pgdata:\n</code></pre>"},{"location":"docker/#backfill-from-stripe","title":"Backfill from Stripe","text":"<p>Note: The <code>/sync</code> endpoints are NOT recommended for use if you have more than 10,000 objects in Stripe. For large backfills, it is best to write a script that loops through each day and sets the <code>created</code> date filters to the start and end of day.</p> <pre><code>POST /sync\nbody: {\n  \"object\": \"product\",\n  \"created\": {\n    \"gte\": 1643872333\n  }\n}\n</code></pre> <ul> <li><code>object</code> all | charge | customer | dispute | invoice | payment_method | payment_intent | plan | price | product | setup_intent | subscription | early_fraud_warning | refund | credit_note | tax_id | subscription_schedules</li> <li><code>created</code> is Stripe.RangeQueryParam. It supports gt, gte, lt, lte</li> </ul>"},{"location":"docker/#alternative-routes-to-sync-dailyweeklymonthly-data","title":"Alternative routes to sync <code>daily/weekly/monthly</code> data","text":"<pre><code>POST /sync/daily\n\n---\n\nPOST /sync/daily\nbody: {\n  \"object\": \"product\"\n}\n</code></pre>"},{"location":"docker/#syncing-single-entity","title":"Syncing single entity","text":"<p>To backfill/update a single entity, you can use</p> <pre><code>POST /sync/single/cus_12345\n</code></pre> <p>The entity type is recognized automatically, based on the prefix.</p>"},{"location":"edge-function/","title":"With Supabase Edge Functions","text":"<p>Create a new Supabase and create a new Edge Function.</p>"},{"location":"edge-function/#prepare-your-database","title":"Prepare your database","text":"<p>Make sure to run the migrations, either by executing them manually, adding them into your CI or running this locally once:</p> <pre><code>import { runMigrations } from '@supabase/stripe-sync-engine'\n;(async () =&gt; {\n  await runMigrations({\n    databaseUrl: 'postgresql://postgres:..@db.&lt;ref&gt;.supabase.co:5432/postgre',\n    schema: 'stripe',\n    logger: console,\n  })\n})()\n</code></pre>"},{"location":"edge-function/#usage","title":"Usage","text":"<p>Sample code:</p> <pre><code>// Setup type definitions for built-in Supabase Runtime APIs\nimport 'jsr:@supabase/functions-js/edge-runtime.d.ts'\nimport { StripeSync } from 'npm:@supabase/stripe-sync-engine@0.37.2'\n\n// Load secrets from environment variables\nconst databaseUrl = Deno.env.get('DATABASE_URL')!\nconst stripeWebhookSecret = Deno.env.get('STRIPE_WEBHOOK_SECRET')!\nconst stripeSecretKey = Deno.env.get('STRIPE_SECRET_KEY')!\n\n// Initialize StripeSync\nconst stripeSync = new StripeSync({\n  databaseUrl,\n  stripeWebhookSecret,\n  stripeSecretKey,\n  backfillRelatedEntities: false,\n  autoExpandLists: true,\n  maxPostgresConnections: 5,\n})\n\nDeno.serve(async (req) =&gt; {\n  // Extract raw body as Uint8Array (buffer)\n  const rawBody = new Uint8Array(await req.arrayBuffer())\n\n  const stripeSignature = req.headers.get('stripe-signature')\n\n  await stripeSync.processWebhook(rawBody, stripeSignature)\n\n  return new Response(null, {\n    status: 202,\n    headers: { 'Content-Type': 'application/json' },\n  })\n})\n</code></pre> <p>Deploy your Edge Function initially.</p> <p>Set up a Stripe webhook with the newly deployed Supabase Edge Function url.</p> <p>Create a new .env file in the <code>supabase</code> directory.</p> <pre><code>DATABASE_URL=\"postgresql://postgres:..@db.&lt;ref&gt;.supabase.co:5432/postgres\"\nSTRIPE_WEBHOOK_SECRET=\"whsec_\"\nSTRIPE_SECRET_KEY=\"sk_test_...\"\n</code></pre> <p>Load the secrets:</p> <p><code>sh supabase secrets set --env-file ./supabase/.env</code>.</p>"},{"location":"typescript/","title":"With Typescript","text":"<p>A TypeScript library to synchronize Stripe data into a Postgres database, designed for use in Node.js backends and serverless environments.</p>"},{"location":"typescript/#features","title":"Features","text":"<ul> <li>Sync Stripe objects (customers, invoices, products, etc.) to your Postgres database.</li> <li>Handles Stripe webhooks for real-time updates.</li> <li>Supports backfilling and entity revalidation.</li> </ul>"},{"location":"typescript/#installation","title":"Installation","text":"<pre><code>npm install @supabase/stripe-sync-engine stripe\n# or\npnpm add @supabase/stripe-sync-engine stripe\n# or\nyarn add @supabase/stripe-sync-engine stripe\n</code></pre>"},{"location":"typescript/#usage","title":"Usage","text":"<pre><code>import { StripeSync } from '@supabase/stripe-sync-engine'\n\nconst sync = new StripeSync({\n  databaseUrl: 'postgres://user:pass@host:port/db',\n  stripeSecretKey: 'sk_test_...',\n  stripeWebhookSecret: 'whsec_...',\n  // logger: &lt;a pino logger&gt;\n})\n\n// Example: process a Stripe webhook\nawait sync.processWebhook(payload, signature)\n</code></pre>"},{"location":"typescript/#configuration","title":"Configuration","text":"Option Type Description <code>databaseUrl</code> string Postgres connection string <code>schema</code> string Database schema name (default: <code>stripe</code>) <code>stripeSecretKey</code> string Stripe secret key <code>stripeWebhookSecret</code> string Stripe webhook signing secret <code>stripeApiVersion</code> string Stripe API version (default: <code>2020-08-27</code>) <code>autoExpandLists</code> boolean Fetch all list items from Stripe (not just the default 10) <code>backfillRelatedEntities</code> boolean Ensure related entities are present for foreign key integrity <code>revalidateEntityViaStripeApi</code> boolean Always fetch latest entity from Stripe instead of trusting webhook payload <code>maxPostgresConnections</code> number Maximum Postgres connections <code>logger</code> Logger Logger instance (pino)"},{"location":"typescript/#database-schema","title":"Database Schema","text":"<p>The library will create and manage a <code>stripe</code> schema in your Postgres database, with tables for all supported Stripe objects (products, customers, invoices, etc.).</p>"},{"location":"typescript/#migrations","title":"Migrations","text":"<p>Migrations are included in the <code>db/migrations</code> directory. You can run them using the provided <code>runMigrations</code> function:</p> <pre><code>import { runMigrations } from '@supabase/stripe-sync-engine'\n\nawait runMigrations({ databaseUrl: 'postgres://...' })\n</code></pre>"},{"location":"typescript/#backfilling-and-syncing-data","title":"Backfilling and Syncing Data","text":""},{"location":"typescript/#syncing-a-single-entity","title":"Syncing a Single Entity","text":"<p>You can sync or update a single Stripe entity by its ID using the <code>syncSingleEntity</code> method:</p> <pre><code>await sync.syncSingleEntity('cus_12345')\n</code></pre> <p>The entity type is detected automatically based on the Stripe ID prefix (e.g., <code>cus_</code> for customer, <code>prod_</code> for product).</p>"},{"location":"typescript/#backfilling-data","title":"Backfilling Data","text":"<p>To backfill Stripe data (e.g., all products created after a certain date), use the <code>syncBackfill</code> method:</p> <pre><code>await sync.syncBackfill({\n  object: 'product',\n  created: { gte: 1643872333 }, // Unix timestamp\n})\n</code></pre> <ul> <li><code>object</code> can be one of: <code>all</code>, <code>charge</code>, <code>customer</code>, <code>dispute</code>, <code>invoice</code>, <code>payment_method</code>, <code>payment_intent</code>, <code>plan</code>, <code>price</code>, <code>product</code>, <code>setup_intent</code>, <code>subscription</code>.</li> <li><code>created</code> is a Stripe RangeQueryParam and supports <code>gt</code>, <code>gte</code>, <code>lt</code>, <code>lte</code>.</li> </ul> <p>Note: For large Stripe accounts (more than 10,000 objects), it is recommended to write a script that loops through each day and sets the <code>created</code> date filters to the start and end of day. This avoids timeouts and memory issues when syncing large datasets.</p>"}]}